// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RootRPGProject.Model;
//
//    var equipment = Equipment.FromJson(jsonString);

namespace RootRPGProject.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Equipment
    {
        [JsonProperty("id")]
        public long id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("load")]
        public long Load { get; set; }
        [JsonProperty("value")]
        public long Value { get; set; }
        [JsonProperty("range")]
        public string Range { get; set; }

        [JsonProperty("maxWear")]
        public long MaxWear { get; set; }

        [JsonProperty("wear")]
        public long Wear { get; set; }
        [JsonProperty("harmType")]
        public string HarmType { get; set; }
        [JsonProperty("harmValue")]
        public long HarmValue { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public List<Tag> Tags { get; set; }

        [JsonProperty("weaponSkills", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> WeaponSkills { get; set; }
    }

    public partial class Equipment
    {
        public static Equipment FromJson(string json) => JsonConvert.DeserializeObject<Equipment>(json, RootRPGProject.Models.EquipmentConverter.Settings);
		public static List<Equipment> FromJsonList(string json) => JsonConvert.DeserializeObject<List<Equipment>>(json, RootRPGProject.Models.EquipmentConverter.Settings);

	}

	public static class SerializeEquipment
    {
        public static string ToJson(this Equipment self) => JsonConvert.SerializeObject(self, RootRPGProject.Models.EquipmentConverter.Settings);
    }

    internal static class EquipmentConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
